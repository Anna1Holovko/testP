@isTest
private class WhitePagesHandlerTest {
    @isTest
    static void whitePagesHandlerTest(){
        White_Pages_setting__c setting = new White_Pages_setting__c();
        setting.URL__c = 'https://proapi.whitepages.com/3.2/identity_check?';
        setting.API_KEY__c = '41683d61fb5b4ffa9280e55833acf4ae';
        insert setting;
        Account ac = TestUtil.createCustomerAccount(); 
        Payment_Method__c paymentMethod = TestUtil.createpaymentMethod(ac.Id,'Credit Card');
        Test.setMock(HttpCalloutMock.class, new APIMock());
        Test.startTest();
        Sales_Order__c so = TestUtil.createsalesOrder(ac.id, Null, paymentMethod.Id);
        Test.stopTest();
    }
    
    public class APIMock implements HttpCalloutMock {
        public Map<String,String> responseBodyMap;
    
        public APIMock(){
            responseBodyMap = new Map<String,String>();
            WhitePagesHandler.Response resp = new WhitePagesHandler.Response();
            WhitePagesHandler.Address_checks addrcheck = new WhitePagesHandler.Address_checks();
            WhitePagesHandler.Phone_checks pcheck = new WhitePagesHandler.Phone_checks();
            WhitePagesHandler.Email_address_checks echeck = new WhitePagesHandler.Email_address_checks();
            WhitePagesHandler.Ip_address_checks ipcheck = new WhitePagesHandler.Ip_address_checks();
            addrcheck.error = 'Test';
            addrcheck.warnings = new List<String>{'test'};
            addrcheck.is_valid = true;
            addrcheck.diagnostics = new List<String>{'test'};
            addrcheck.is_active = true;
            addrcheck.address_to_name = 'test';
            addrcheck.resident_name = 'test';
            addrcheck.resident_age_range = 'test';
            addrcheck.is_resident_deceased = true;
            addrcheck.is_commercial = true;
            addrcheck.is_forwarder = true;
            addrcheck.type = 'test';
            pcheck.error = 'test';
            pcheck.warnings = new List<String>{'test'};
            pcheck.is_valid = true;
            pcheck.phone_to_name = 'test';
            pcheck.phone_to_address = 'test';
            pcheck.subscriber_name = 'test';
            pcheck.subscriber_age_range = 'test';
            pcheck.country_code = 'test';
            pcheck.line_type = 'test';
            pcheck.carrier = 'test';
            pcheck.is_commercial = true;
            pcheck.is_prepaid = true;
            echeck.error = 'test';
            echeck.warnings = new List<String>{'test'};
            echeck.is_valid = true;
            echeck.diagnostics = new List<String>{'test'};
            echeck.is_autogenerated = true;
            echeck.is_disposable = true; 
            echeck.email_to_name = 'test';
            echeck.registered_name = 'test';
            echeck.registered_owner_age_range = 'test';
            echeck.email_first_seen_date = system.today();
            echeck.email_first_seen_days = 1;
            echeck.email_domain_creation_date = system.today();
            echeck.email_domain_creation_days = 1;
            ipcheck.error = 'test';
            ipcheck.warnings = new List<String>{'test'};
            ipcheck.is_valid = true;
            ipcheck.is_proxy = true;
            ipcheck.distance_from_address = 5;
            ipcheck.distance_from_phone = 5;
            ipcheck.is_resident_deceased = true;
            ipcheck.is_commercial = true;
            ipcheck.is_forwarder = true;
            ipcheck.connection_type = 'test';
        
        
            resp.primary_phone_checks = pcheck;
            resp.secondary_phone_checks = pcheck;
            resp.primary_address_checks = addrcheck;
            resp.secondary_address_checks = addrcheck;
            resp.email_address_checks = echeck;
            resp.ip_address_checks = ipcheck;
            String responseBody = JSON.serialize(resp);
            responseBodyMap.put('https://proapi.whitepages.com/3.2/identity_check',responseBody);
        }
    
        public HTTPResponse respond(HTTPRequest req) {
            String endpoint = req.getEndpoint();
            if(endpoint.contains('?')){
                endpoint = endpoint.split('\\?')[0];
            }
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody(responseBodyMap.get(endpoint));
            res.setStatusCode(200);
            System.debug(res);
            return res;
        }
    }
}